#!/bin/bash

USAGE="Usage: $0 [service|run]"

if [ $# -ne 1 ]; then
    echo $USAGE
    exit 1
fi

SERVICE=0
if [ $1 == "service" ]; then
    SERVICE=1
elif [ $1 != "run" ]; then
    echo $USAGE
    exit 1
fi

SS_UI=1
SS_HD=0

# test if audio is available
RELEASE=$(lsb_release -a 2>&1 | grep "Release:" | awk '{ print $2 }' | cut -d'.' -f1)
echo "Ubuntu version: $RELEASE"
if [ $RELEASE -lt 22 ]; then
    SINK=$(pactl list short sinks | awk '{ print $2 }')
    echo "Available sinks: $SINK"
    if [ $SINK == "auto_null" ]; then
        # create virtual device
        pactl load-module module-null-sink sink_name=vspeaker sink_properties=device.description=virtual_speaker
    fi
fi

USER_DISPLAY=$(find /tmp/.X11-unix -user $USER | awk -F'.X11-unix/X' '{print $2}' | sort | head -n 1)
# do not use ssh user displays
if [ $USER_DISPLAY -gt 1000 ]; then
    unset USER_DISPLAY
fi

if [ $USER_DISPLAY ]; then
    VT=0
    DISPLAY=:$USER_DISPLAY
    echo "Cloning running display $DISPLAY"
else
    TEST_STARTX=$(timeout 0.1s startx -- :99 2>&1)
    VT=$(echo $TEST_STARTX | awk -F'Cannot open virtual console ' '{print $2}'| cut -c1)
    CURR_MAX_DISPLAY_ID=$(find /tmp/.X11-unix | awk -F'.X11-unix/X' '{print $2}' | sort | tail -n 1)
    DISPLAY=:$(($CURR_MAX_DISPLAY_ID+1))
    sudo control_tty_access $VT 0 -1 $USER
    startx -- $DISPLAY -layout VirtualLayout &
    X_PID=$!
    echo "Running startx on VT $VT and display $DISPLAY"
    echo "X server runs in background ($X_PID)"
fi

sudo control_tty_access 0 $SS_UI $SS_HD $USER

echo "SERVICE MODE=$SERVICE"
if [ $SERVICE -eq 1 ]; then
    sunshine | grep -E 'established|connected: true' &
    echo "Storing TTY $VT for cleanup in /tmp/sunshine_service"
    echo $VT > /tmp/sunshine_service
else
    sunshine | grep -E 'established|connected: true'
    if [ $X_PID ]; then
        echo "Killing X Server ($X_PID)"
        kill -15 $X_PID
    fi

    echo "Cleanup ..."
    sudo control_tty_access $VT 0 -1 root
fi

exit 0
